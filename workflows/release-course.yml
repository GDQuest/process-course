# Create release of a course. This script should be placed in .github/workflows folder inside of the course repo
# To create a release, create and push a new tag like so:
# git tag v1.0.0 && git push --tags
# To make this workflow work, make sure to go to repo Settings > Actions > General > Workflow permissions and set it to "Read and Write permissions"
name: Create a Release

on:
  push:
    tags:
      - "*.*.*"

jobs:
  run-script:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Download and run the course processing script
      # I need to download the latest version of the script, and to find out what that is I use jq (command-line JSON processor)
      - name: Install jq
        run: |
          sudo apt-get install jq
      - name: Download and extract compiled script
        run: |
          LATEST_RELEASE=$(curl --silent "https://api.github.com/repos/lumenwrites/process-course/releases/latest" | jq -r .assets[].browser_download_url | grep "process-course-linux")
          wget $LATEST_RELEASE -O process-course
          chmod +x process-course
  
      - name: Run compiled script
        run: |
          ./process-course

      - name: Generate Changelog
        run: |
          export TAG_VERSION="${GITHUB_REF#refs/*/}"
          export TAG_MESSAGE=$(git tag -l --format='%(contents:subject)' $TAG_VERSION)
          export COMMIT_SHA="${{ github.sha }}"
          export FILE="${{ github.workspace }}-CHANGELOG.txt"
          echo "# Learn to Code for Godot" > $FILE
          echo "commit: $COMMIT_SHA" >> $FILE
          echo "$TAG_VERSION: $TAG_MESSAGE" >> $FILE
          echo "" >> $FILE
          ls content-gdschool-releases/*.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          append_body: true
          files: |
            content-gdschool-releases/*.zip
          body_path: ${{ github.workspace }}-CHANGELOG.txt

      # Automatically redeploy the website with the new content once the release has been created
      # The first URL redeploys the main branch, the second one redeploys staging
      # Settings > Git > Deploy Hooks https://vercel.com/gdquest/gdschool/settings/git
      - name: Ping Vercel Deployment
        run: |
          curl -X POST https://api.vercel.com/v1/integrations/deploy/prj_F5wWV8VNTBKfwHujOhHukBYS5wLD/UTdoAJLfns
          curl -X POST https://api.vercel.com/v1/integrations/deploy/prj_F5wWV8VNTBKfwHujOhHukBYS5wLD/xSPbB3N81Q
